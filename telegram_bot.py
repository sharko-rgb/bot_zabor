from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup([
    ["1. –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–±–æ—Ä–∞"],
    ["2. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"],
    ["3. –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä"],
    ["4. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç"],
    ["5. –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É"],
    ["6. –ö–æ–Ω—Ç–∞–∫—Ç—ã"]
], resize_keyboard=True)

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–±–æ—Ä–∞
fence_types_menu = ReplyKeyboardMarkup([
    ["1. –ó–∞–±–æ—Ä –∏–∑ –ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª–∞"],
    ["2. –ó–∞–±–æ—Ä ¬´–ø—Ä–æ—Ñ–ª–∏—Å—Ç –≤ —Ä–∞–º–∫–µ¬ª"],
    ["3. –ï–≤—Ä–æ—à—Ç–∞–∫–µ—Ç–Ω–∏–∫ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ"],
    ["4. –ï–≤—Ä–æ—à—Ç–∞–∫–µ—Ç–Ω–∏–∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ"],
    ["5. –ó–∞–±–æ—Ä –ñ–∞–ª—é–∑–∏"],
    ["6. –ó–∞–±–æ—Ä –†–∞–Ω—á–æ"],
    ["7. –ó–∞–±–æ—Ä –∏–∑ 3–î —Å–µ—Ç–∫–∏"],
    ["8. –í–æ—Ä–æ—Ç–∞ –æ—Ç–∫–∞—Ç–Ω—ã–µ"],
    ["9. –í–æ—Ä–æ—Ç–∞ —Ä–∞—Å–ø–∞—à–Ω—ã–µ + –ö–∞–ª–∏—Ç–∫–∞"],
    ["10. –ù–∞–≤–µ—Å—ã –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"],
    ["‚¨Ö –ù–∞–∑–∞–¥"]
], resize_keyboard=True)

# –°—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –≤–∏–¥–∞–º –∑–∞–±–æ—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ, –∑–∞ 1 –º–µ—Ç—Ä, –¥–ª—è –≤—ã—Å–æ—Ç—ã 1.8 –º)
fence_prices = {
    "1": 3474,
    "2": 6140,
    "3": 7620,
    "4": 9650,
    "5": 8700,
    "6": 14500,
    "7": 3100,
    "8": 87000,
    "9": 37000,
    "10": 7500  # –æ—Ç 7500 —Ä—É–±./–º.–∫–≤.
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –∫–æ–º–ø–∞–Ω–∏—é Zabory72.ru, —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ—Ä–æ–≤ ¬´–ø–æ–¥ –∫–ª—é—á¬ª, "
        "–≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–∞–º–µ–Ω–Ω—ã—Ö, –∏–∑ –∫–∏—Ä–ø–∏—á–∞ –∏ –∫–µ—Ä–∞–º–∑–∏—Ç–æ–±–ª–æ–∫–æ–≤, —Ç–∞–∫–∂–µ –º—ã —Å—Ç—Ä–æ–∏–º –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤–µ—Å—ã –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.\n\n"
        "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:"
    )
    await update.message.reply_text(text, reply_markup=main_menu)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.message.from_user.id

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text.startswith("1"):
        await update.message.reply_text("–ö–∞–∫–æ–π —Ç–∏–ø –∑–∞–±–æ—Ä–∞ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=fence_types_menu)
        context.user_data['state'] = 'choosing_fence_type'

    elif text.startswith("2"):
        await update.message.reply_text(
            "–î–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–±–æ—Ä–∞ –∏–∑ –º–µ–Ω—é '–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–±–æ—Ä–∞' –∏ —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n"
            "–ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ç–∞–±–ª–∏—Ü–µ."
        )
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ–∑–∂–µ

    elif text.startswith("3"):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∑–∞–º–µ—Ä–∞:")
        context.user_data['state'] = 'awaiting_address'

    elif text.startswith("4"):
        await update.message.reply_text("–í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç:\nhttps://zabory72.ru/gallery")

    elif text.startswith("5"):
        await update.message.reply_text("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        context.user_data['state'] = 'awaiting_question'

    elif text.startswith("6"):
        await update.message.reply_text(
            "üìå –ê–¥—Ä–µ—Å: –≥. –¢—é–º–µ–Ω—å, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1\n"
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (3452) 00-00-00\n"
            "üåê –°–∞–π—Ç: https://zabory72.ru"
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–±–æ—Ä–∞ (–ø–æ–¥–º–µ–Ω—é)
    elif context.user_data.get('state') == 'choosing_fence_type':
        if text == "‚¨Ö –ù–∞–∑–∞–¥":
            await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
            context.user_data.pop('state')
            return

        # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä "1. –ó–∞–±–æ—Ä –∏–∑ –ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª–∞"
        selected_num = text.split(".")[0]
        if selected_num in fence_prices:
            price = fence_prices[selected_num]
            fence_name = text[text.find(".")+2:]  # –û—Ç—Ä–µ–∑–∞–µ–º –Ω–æ–º–µ—Ä –∏ —Ç–æ—á–∫—É

            await update.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {fence_name}\n"
                f"–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1 –º–µ—Ç—Ä (–≤—ã—Å–æ—Ç–∞ 1.8 –º): {price} —Ä—É–±.\n\n"
                "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏ —Å—Ä–∞–∑—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'."
            )
            context.user_data['selected_fence'] = fence_name
            context.user_data['state'] = 'ready_to_calculate'
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")

    elif context.user_data.get('state') == 'ready_to_calculate':
        if text.lower() == "—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å":
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–æ–æ–±—â–∏—Ç–µ –¥–ª–∏–Ω—É –∑–∞–±–æ—Ä–∞ –≤ –º–µ—Ç—Ä–∞—Ö."
            )
            context.user_data['state'] = 'awaiting_length'
        else:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á—ë—Ç–∞ –∏–ª–∏ '‚¨Ö –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")

    elif context.user_data.get('state') == 'awaiting_length':
        try:
            length = float(text.replace(",", "."))
            fence_name = context.user_data.get('selected_fence', '–∑–∞–±–æ—Ä')
            price_per_meter = None
            for k, v in fence_prices.items():
                if fence_name.lower() in v.lower() if isinstance(v, str) else False:
                    price_per_meter = v
            if not price_per_meter:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ –∫–ª—é—á—É –∏–∑ saved fence name
                for k, v in fence_prices.items():
                    if fence_name.lower().startswith(v.lower() if isinstance(v, str) else ""):
                        price_per_meter = v
            # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ –∫–ª—é—á—É –∏–∑ user_data
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á, —Ç.–∫. user_data –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –Ω–æ–º–µ—Ä, –∞ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
            # –õ—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –≤ user_data, —Ç–æ–≥–¥–∞:
            selected_num = None
            for num, name in fence_prices.items():
                if fence_name.lower() in name.lower():
                    selected_num = num
            if selected_num is None:
                selected_num = list(fence_prices.keys())[0]  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            price_per_meter = fence_prices[selected_num]

            total_price = length * price_per_meter
            await update.message.reply_text(
                f"–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {fence_name} –¥–ª–∏–Ω–æ–π {length} –º —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {total_price:.2f} —Ä—É–±."
            )
            context.user_data.pop('state')
            context.user_data.pop('selected_fence')
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–¥–ª–∏–Ω—É –∑–∞–±–æ—Ä–∞) –≤ –º–µ—Ç—Ä–∞—Ö.")

    elif context.user_data.get('state') == 'awaiting_address':
        address = update.message.text
        # –°–æ—Ö—Ä–∞–Ω–∏ –∑–∞—è–≤–∫—É –≤ –ë–î
        # database.save_request(user_id, "–∑–∞–º–µ—Ä", f"–ê–¥—Ä–µ—Å: {address}")  # –µ—Å–ª–∏ –µ—Å—Ç—å –ë–î
        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.")
        context.user_data.pop('state')

    elif context.user_data.get('state') == 'awaiting_question':
        question = update.message.text
        # database.save_request(user_id, "–≤–æ–ø—Ä–æ—Å", question)  # –µ—Å–ª–∏ –µ—Å—Ç—å –ë–î
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
        context.user_data.pop('state')

    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.",
            reply_markup=main_menu
        )


if __name__ == "__main__":
    import config
    from telegram.ext import Application, CommandHandler, MessageHandler, filters

    database.init_db()  # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î

    app = Application.builder().token(config.TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()


