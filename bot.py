import re
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

API_TOKEN = "7853853505:AAEhTPDeWUlX67naGu5JhW9-maep1yesUD0"
ADMIN_ID = 1346038165  # –í–∞—à Telegram ID

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    MAIN_MENU,
    CHOOSING_FENCE,
    ENTER_LENGTH,
    ENTER_HEIGHT,
    CHOOSE_GATE,
    CONFIRMATION,
    ENTER_NAME,
    ENTER_PHONE,
    ASK_QUESTION,
    CONFIRM_QUESTION,
) = range(10)

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGES = {
    "welcome": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏ Zabory72.ru. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    "choose_fence": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–±–æ—Ä–∞:",
    "enter_length": "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–±–æ—Ä–∞ –≤ –º–µ—Ç—Ä–∞—Ö (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 15.5):",
    "enter_height": "–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –∑–∞–±–æ—Ä–∞ –≤ –º–µ—Ç—Ä–∞—Ö (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5):",
    "choose_gate": "–í—ã–±–µ—Ä–∏—Ç–µ, –Ω—É–∂–Ω—ã –ª–∏ –≤–æ—Ä–æ—Ç–∞ –∏–ª–∏ –∫–∞–ª–∏—Ç–∫–∞:",
    "enter_name": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
    "enter_phone": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 999 123-45-67):",
    "invalid_number": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–ø—Ä–∏–º–µ—Ä: 12.5):",
    "invalid_phone": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    "confirm_order": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É:\n\n{summary}",
    "order_sent": "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
    "cancelled": "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
    "main_menu": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    "ask_question": "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É:",
    "confirm_question": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?",
    "question_sent": "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –°–ø–∞—Å–∏–±–æ!",
    "back_button": "‚¨Ö –ù–∞–∑–∞–¥",
    "main_menu_button": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
}

def main_menu_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–±–æ—Ä–∞", callback_data="choose_fence")],
        [InlineKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="calculate_price")],
        [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–º–µ—Ä", callback_data="order_measurement")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç", callback_data="show_examples")],
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É", callback_data="ask_specialist")],
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
    ])

def fence_type_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª", callback_data="fence_prof")],
        [InlineKeyboardButton("–°–µ—Ç–∫–∞-—Ä–∞–±–∏—Ü–∞", callback_data="fence_mesh")],
        [InlineKeyboardButton("–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ—Ñ–∏–ª—å", callback_data="fence_metal")],
        [InlineKeyboardButton("–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –∑–∞–±–æ—Ä", callback_data="fence_wood")],
        [InlineKeyboardButton("–®—Ç–∞–∫–µ—Ç–Ω–∏–∫", callback_data="fence_shtaketnik")],
        [InlineKeyboardButton("–ï–≤—Ä–æ–∑–∞–±–æ—Ä (–±–µ—Ç–æ–Ω–Ω—ã–π)", callback_data="fence_euro")],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–π / –ù–µ —É–≤–µ—Ä–µ–Ω", callback_data="fence_other")],
        [InlineKeyboardButton(MESSAGES["back_button"], callback_data="back_to_main")],
    ])

def gate_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–í–æ—Ä–æ—Ç–∞", callback_data="gate_gate")],
        [InlineKeyboardButton("–ö–∞–ª–∏—Ç–∫–∞", callback_data="gate_door")],
        [InlineKeyboardButton("–í–æ—Ä–æ—Ç–∞ –∏ –∫–∞–ª–∏—Ç–∫–∞", callback_data="gate_both")],
        [InlineKeyboardButton("–ù–µ –Ω—É–∂–Ω–æ", callback_data="gate_none")],
        [InlineKeyboardButton(MESSAGES["back_button"], callback_data="back_to_length")],
    ])

def confirm_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="confirm_yes")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="confirm_no")],
        [InlineKeyboardButton(MESSAGES["back_button"], callback_data="back_to_main")],
    ])

def main_menu_button_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(MESSAGES["main_menu_button"], callback_data="back_to_main")]
    ])

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–≥—É–ª—è—Ä–∫–µ (—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞)
PHONE_REGEX = re.compile(r"^\+7\s?\(?\d{3}\)?[\s-]?\d{3}[\s-]?\d{2}[\s-]?\d{2}$")

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        MESSAGES["welcome"],
        reply_markup=main_menu_kb()
    )
    return MAIN_MENU

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    # –û—á–∏—Å—Ç–∏–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é
    if data == "back_to_main":
        context.user_data.clear()
        await query.edit_message_text(MESSAGES["welcome"], reply_markup=main_menu_kb())
        return MAIN_MENU

    if data == "choose_fence":
        await query.edit_message_text(MESSAGES["choose_fence"], reply_markup=fence_type_kb())
        return CHOOSING_FENCE

    if data.startswith("fence_"):
        fence_type = data[6:]
        context.user_data["fence_type"] = fence_type
        await query.edit_message_text(MESSAGES["enter_length"], reply_markup=main_menu_button_kb())
        return ENTER_LENGTH

    if data == "calculate_price":
        await query.edit_message_text(MESSAGES["enter_length"], reply_markup=main_menu_button_kb())
        return ENTER_LENGTH

    if data == "back_to_length":
        await query.edit_message_text(MESSAGES["enter_length"], reply_markup=main_menu_button_kb())
        return ENTER_LENGTH

    if data == "back_to_height":
        await query.edit_message_text(MESSAGES["enter_height"], reply_markup=main_menu_button_kb())
        return ENTER_HEIGHT

    if data == "back_to_gate":
        await query.edit_message_text(MESSAGES["choose_gate"], reply_markup=gate_kb())
        return CHOOSE_GATE

    if data == "order_measurement":
        await query.edit_message_text(MESSAGES["enter_name"], reply_markup=main_menu_button_kb())
        return ENTER_NAME

    if data == "ask_specialist":
        await query.edit_message_text(MESSAGES["ask_question"], reply_markup=main_menu_button_kb())
        return ASK_QUESTION

    if data == "show_examples":
        await query.edit_message_text(
            "–ü—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç:\nhttps://example.com/works",
            reply_markup=main_menu_kb()
        )
        return MAIN_MENU

    if data == "contacts":
        await query.edit_message_text(
            "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            "–¢–µ–ª–µ—Ñ–æ–Ω: +7 123 456 78 90\n"
            "Email: info@zabory72.ru\n"
            "–°–∞–π—Ç: https://zabory72.ru",
            reply_markup=main_menu_kb()
        )
        return MAIN_MENU

    if data.startswith("gate_"):
        gate = data[5:]
        context.user_data["gate"] = gate
        await query.edit_message_text(MESSAGES["enter_name"], reply_markup=main_menu_button_kb())
        return ENTER_NAME

    if data == "confirm_yes":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É
        d = context.user_data
        summary = (
            f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n"
            f"–ó–∞–±–æ—Ä: {d.get('fence_type', '–Ω–µ –≤—ã–±—Ä–∞–Ω')}\n"
            f"–î–ª–∏–Ω–∞: {d.get('length', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} –º\n"
            f"–í—ã—Å–æ—Ç–∞: {d.get('height', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} –º\n"
            f"–í–æ—Ä–æ—Ç–∞/–∫–∞–ª–∏—Ç–∫–∞: {d.get('gate', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ò–º—è: {d.get('name')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {d.get('phone')}"
        )
        await query.edit_message_text(MESSAGES["order_sent"], reply_markup=main_menu_kb())
        await context.bot.send_message(ADMIN_ID, summary, parse_mode="HTML")
        context.user_data.clear()
        return MAIN_MENU

    if data == "confirm_no":
        await query.edit_message_text(MESSAGES["cancelled"], reply_markup=main_menu_kb())
        context.user_data.clear()
        return MAIN_MENU

    if data == "cancel":
        await query.edit_message_text(MESSAGES["cancelled"], reply_markup=main_menu_kb())
        context.user_data.clear()
        return MAIN_MENU

    await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
    return MAIN_MENU


async def length_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(",", ".").strip()
    try:
        length = float(text)
        if length <= 0:
            raise ValueError
        context.user_data["length"] = length
        await update.message.reply_text(MESSAGES["enter_height"], reply_markup=main_menu_button_kb())
        return ENTER_HEIGHT
    except ValueError:
        await update.message.reply_text(MESSAGES["invalid_number"], reply_markup=main_menu_button_kb())
        return ENTER_LENGTH

async def height_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(",", ".").strip()
    try:
        height = float(text)
        if height <= 0:
            raise ValueError
        context.user_data["height"] = height
        await update.message.reply_text(MESSAGES["choose_gate"], reply_markup=gate_kb())
        return CHOOSE_GATE
    except ValueError:
        await update.message.reply_text(MESSAGES["invalid_number"], reply_markup=main_menu_button_kb())
        return ENTER_HEIGHT

async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if len(name) < 2:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.", reply_markup=main_menu_button_kb())
        return ENTER_NAME
    context.user_data["name"] = name
    await update.message.reply_text(MESSAGES["enter_phone"], reply_markup=main_menu_button_kb())
    return ENTER_PHONE

async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not PHONE_REGEX.match(phone):
        await update.message.reply_text(MESSAGES["invalid_phone"], reply_markup=main_menu_button_kb())
        return ENTER_PHONE
    context.user_data["phone"] = phone

    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    d = context.user_data
    summary = (
        f"–ó–∞–±–æ—Ä: {d.get('fence_type', '–Ω–µ –≤—ã–±—Ä–∞–Ω')}\n"
        f"–î–ª–∏–Ω–∞: {d.get('length', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} –º\n"
        f"–í—ã—Å–æ—Ç–∞: {d.get('height', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} –º\n"
        f"–í–æ—Ä–æ—Ç–∞/–∫–∞–ª–∏—Ç–∫–∞: {d.get('gate', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ò–º—è: {d.get('name')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {d.get('phone')}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏?"
    )
    await update.message.reply_text(summary, reply_markup=confirm_kb())
    return CONFIRMATION

async def ask_question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = update.message.text.strip()
    if len(question) < 5:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å.", reply_markup=main_menu_button_kb())
        return ASK_QUESTION
    context.user_data["question"] = question
    await update.message.reply_text(MESSAGES["confirm_question"], reply_markup=confirm_kb())
    return CONFIRM_QUESTION

async def confirm_question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "confirm_yes":
        text = f"<b>–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>:\n{context.user_data.get('question')}"
        await query.edit_message_text(MESSAGES["question_sent"], reply_markup=main_menu_kb())
        await context.bot.send_message(ADMIN_ID, text, parse_mode="HTML")
        context.user_data.clear()
        return MAIN_MENU
    if data == "confirm_no":
        await query.edit_message_text(MESSAGES["cancelled"], reply_markup=main_menu_kb())
        context.user_data.clear()
        return MAIN_MENU

    if data == "back_to_main":
        await query.edit_message_text(MESSAGES["welcome"], reply_markup=main_menu_kb())
        context.user_data.clear()
        return MAIN_MENU

    return CONFIRM_QUESTION

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(MESSAGES["cancelled"], reply_markup=main_menu_kb())
    context.user_data.clear()
    return MAIN_MENU

async def fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.", reply_markup=main_menu_kb())
    return MAIN_MENU


def main():
    app = ApplicationBuilder().token(API_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), CallbackQueryHandler(main_menu_handler)],
        states={
            MAIN_MENU: [CallbackQueryHandler(main_menu_handler)],

            CHOOSING_FENCE: [CallbackQueryHandler(main_menu_handler)],

            ENTER_LENGTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, length_handler)],
            ENTER_HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, height_handler)],

            CHOOSE_GATE: [CallbackQueryHandler(main_menu_handler)],

            ENTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
            ENTER_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler)],

            CONFIRMATION: [CallbackQueryHandler(main_menu_handler)],

            ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_question_handler)],
            CONFIRM_QUESTION: [CallbackQueryHandler(confirm_question_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("start", start)],
        allow_reentry=True,
    )

    app.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()









