import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, ConversationHandler, filters

logging.basicConfig(level=logging.INFO)

TG_ADMIN_ID = 1346038165  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

menu_buttons = [[
    "üî© –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–±–æ—Ä–∞",
    "üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"
], [
    "üìê –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä",
    "üñº –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç"
], [
    "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É",
    "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"
]]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –∫–æ–º–ø–∞–Ω–∏—é Zabory72.ru ‚Äî —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ—Ä–æ–≤ –ø–æ–¥ –∫–ª—é—á...",
        reply_markup=ReplyKeyboardMarkup(menu_buttons, resize_keyboard=True)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìê –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return 1
    elif text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        return 10
    elif text == "üñº –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç":
        await update.message.reply_photo(photo=InputFile("photo1.jpg"), caption="–ó–∞–±–æ—Ä –ñ–∞–ª—é–∑–∏, –≥. –¢—é–º–µ–Ω—å")
        return ConversationHandler.END
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "–≥. –¢—é–º–µ–Ω—å, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1\n–¢–µ–ª: +7 (3452) 00-00-00\nEmail: info@zabory72.ru\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–Ω‚Äì–°–± —Å 09:00 –¥–æ 18:00"
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.")
        return ConversationHandler.END

# –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–º–µ—Ä
user_data = {}

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    return 2

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data['phone'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    return 3

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data['address'] = update.message.text
    await update.message.reply_text("–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    return 4

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data['time'] = update.message.text
    message = f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–º–µ—Ä\n–ò–º—è: {user_data['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n–ê–¥—Ä–µ—Å: {user_data['address']}\n–í—Ä–µ–º—è: {user_data['time']}"
    await context.bot.send_message(chat_id=TG_ADMIN_ID, text=message)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    return ConversationHandler.END

# –í–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
async def get_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    question = update.message.text
    message = f"üì• –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username if user.username else user.id}:\n{question}"
    await context.bot.send_message(chat_id=TG_ADMIN_ID, text=message)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token("7853853505:AAEhTPDeWUlX67naGu5JhW9-maep1yesUD0").build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
            4: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
            10: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_question)],
        },
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.run_polling()
















