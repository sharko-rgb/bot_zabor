import logging
import sqlite3
from telegram import (Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto)
from telegram.ext import (ApplicationBuilder, CommandHandler, CallbackQueryHandler,
                          MessageHandler, ContextTypes, filters)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = "7853853505:AAEhTPDeWUlX67naGu5JhW9-maep1yesUD0"
ADMIN_CHAT_ID = 1346038165  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
DB_NAME = "users.db"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        fence_type TEXT,
        area TEXT
    )
    """)
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_user_data(user_id, username, fence_type=None, area=None):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO users (user_id, username, fence_type, area)
        VALUES (?, ?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET
            username=excluded.username,
            fence_type=COALESCE(excluded.fence_type, users.fence_type),
            area=COALESCE(excluded.area, users.area)
    """, (user_id, username, fence_type, area))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–±–æ—Ä–∞
def get_user_fence_type(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT fence_type FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    conn.close()
    return row[0] if row else None

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [InlineKeyboardButton("1. –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–±–æ—Ä–∞", callback_data="choose_fence")],
        [InlineKeyboardButton("2. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="calc_cost")],
        [InlineKeyboardButton("3. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä", callback_data="free_measure")],
        [InlineKeyboardButton("4. –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç", callback_data="examples")],
        [InlineKeyboardButton("5. –í–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É", callback_data="ask_expert")],
        [InlineKeyboardButton("6. –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
    ]
    return InlineKeyboardMarkup(keyboard)

# –¢–∏–ø—ã –∑–∞–±–æ—Ä–æ–≤
FENCE_TYPES = {
    "fence_1": ("–ó–∞–±–æ—Ä –∏–∑ –ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª–∞", 3474, 3650),
    "fence_2": ("–ü—Ä–æ—Ñ–ª–∏—Å—Ç –≤ —Ä–∞–º–∫–µ", 6140, 6500),
    "fence_3": ("–ï–≤—Ä–æ—à—Ç–∞–∫–µ—Ç–Ω–∏–∫ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ", 7620, 8260),
    "fence_4": ("–ï–≤—Ä–æ—à—Ç–∞–∫–µ—Ç–Ω–∏–∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ", 9650, 10350),
    "fence_5": ("–ñ–∞–ª—é–∑–∏", 8700, None),
    "fence_6": ("–†–∞–Ω—á–æ –¥–≤–æ–π–Ω–æ–π", 14500, None),
    "fence_6b": ("–†–∞–Ω—á–æ –æ–¥–∏–Ω–∞—Ä–Ω–æ–π –ª–∞–º–µ–ª–∏", 11000, None),
    "fence_7": ("3–î —Å–µ—Ç–∫–∞", 3100, None),
    "fence_8": ("–û—Ç–∫–∞—Ç–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞", 87000, 87000),
    "fence_9": ("–†–∞—Å–ø–∞—à–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞ + –∫–∞–ª–∏—Ç–∫–∞", 37000, 37000),
    "fence_10": ("–ù–∞–≤–µ—Å—ã", "–æ—Ç 7500 —Ä—É–±./–º¬≤", "")
}

def fence_menu():
    keyboard = []
    for i, (key, value) in enumerate(FENCE_TYPES.items(), start=1):
        keyboard.append([InlineKeyboardButton(f"{i}. {value[0]}", callback_data=f"{key}")])
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    save_user_data(user.id, user.username)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user = query.from_user

    if data == "choose_fence":
        await query.edit_message_text("–ö–∞–∫–æ–π —Ç–∏–ø –∑–∞–±–æ—Ä–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=fence_menu())
    elif data.startswith("fence_"):
        fence_name = FENCE_TYPES[data][0]
        save_user_data(user.id, user.username, fence_type=fence_name)
        await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {fence_name}. –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å?", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="details")],
            [InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="menu")]
        ]))
    elif data == "details":
        fence = get_user_fence_type(user.id)
        cost = next((v for k, v in FENCE_TYPES.items() if v[0] == fence), None)
        text = f"{fence}\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏ h=1.8–º: {cost[1]}\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏ h=2.0–º: {cost[2]}" if isinstance(cost[1], int) else f"{fence}: {cost[1]}"
        await query.edit_message_text(text, reply_markup=main_menu())
    elif data == "calc_cost":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ –≤ –º¬≤:")
        context.user_data['awaiting_area'] = True
    elif data == "free_measure":
        await query.edit_message_text("–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω.")
    elif data == "examples":
        media = [InputMediaPhoto(media="https://example.com/photo1.jpg"),
                 InputMediaPhoto(media="https://example.com/photo2.jpg")]
        await context.bot.send_media_group(chat_id=update.effective_chat.id, media=media)
    elif data == "ask_expert":
        await query.edit_message_text("–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    elif data == "contacts":
        await query.edit_message_text("–ö–æ–Ω—Ç–∞–∫—Ç—ã:\nüìû +7 (900) 000-00-00\nüåê zabory.ru\nüìç –ú–æ—Å–∫–≤–∞")
    elif data == "menu":
        await query.edit_message_text("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–ª–æ—â–∞–¥–∏
async def handle_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_area'):
        try:
            area = float(update.message.text)
            user = update.effective_user
            fence = get_user_fence_type(user.id)
            cost = next((v for k, v in FENCE_TYPES.items() if v[0] == fence), None)
            unit_price = cost[1] if isinstance(cost[1], int) else 0
            total = unit_price * area
            msg = f"–¢–∏–ø –∑–∞–±–æ—Ä–∞: {fence}\n–ü–ª–æ—â–∞–¥—å: {area} –º¬≤\n–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total:.2f} —Ä—É–±."
            await update.message.reply_text(msg)
            await context.bot.send_message(ADMIN_CHAT_ID, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{user.username}:\n{msg}")
            save_user_data(user.id, user.username, area=str(area))
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        finally:
            context.user_data['awaiting_area'] = False

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    init_db()
    app = ApplicationBuilder().token(API_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_area))

    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())











